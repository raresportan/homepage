---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Newsletter from "../components/Newsletter.astro";
import TwitterShare from "../components/TwitterShare.astro";
import Waves from "../components/Waves.astro";
import { formatDate, slug, slugify } from "../lib/utils";

interface Props {
	entry: CollectionEntry<'post'>;
}

export async function getStaticPaths() {
	const posts = (await getCollection('post')).sort(
	(a, b) =>
		new Date(b.data.pubDate).valueOf() -
		new Date(a.data.pubDate).valueOf()
	);

	return posts.map((entry, index) => ({		
		params: { slug: slug(entry) },
		props: { 
			entry,			
		},
	}));
}

const { entry } = Astro.props;
const { title, description, pubDate, keywords, updatedDate } = entry.data;
const { Content, remarkPluginFrontmatter } = await render(entry);
const { twitterImage, minutesRead } = remarkPluginFrontmatter;

---    

<script>
	document.querySelectorAll('pre[class*="language-"]').forEach(element => {
		const code = element && element.querySelector('code');
		if(code) {
			const btn = document.createElement('button');
			btn.innerHTML = 'Copy';
			btn.className = 'copy-button';
			btn.addEventListener('click', function(){
				navigator && navigator.clipboard && navigator.clipboard.writeText(code.innerText)
				.then(() => btn.innerHTML = 'Copied!', 
					  () => btn.innerHTML = 'Copy failed');
			})
			btn.addEventListener('mouseout', function() {	
				btn.innerHTML = 'Copy';
			})
			element.appendChild(btn);	
		}	
	});
</script>

<!DOCTYPE html>
<html lang="en">
	<head>
		<link href="../prism-dark.css" rel="stylesheet" />
		<BaseHead title={title} description={description} twitterImage={twitterImage} />
	</head>

	<body class:list={["light"]}>
		<Header title={title} isOnHomePage={false} />
		<main id="main" role="main">
			<article class="post flow centered-content">
				<header>
					<h1 class="title">{title}</h1>
					{
						pubDate && (
							<time>
								{formatDate(pubDate)}{" "}
								{minutesRead && (
									<>
										{" "}
										• <em>{minutesRead}</em>
									</>
								)}
								{keywords && (
									<>
										{" "}
										• <em>{keywords.map(k => <a href={`/tags/${slugify(k)}`}>{k}</a>)}</em>
									</>
								)}
							</time>
						)
					}
					{
						updatedDate && (
							<div>
								Last updated on <time>{updatedDate}</time>
							</div>
						)
					}
				</header>
				<Content /> 
				
			</article>

			<section class="post-footer">
				<Waves
					id="gentle-wave-login"
					className="footer"
					wave1X="0"
					wave2X="48"
					wave3X="120"
					wave4X="68"
				/>
				<TwitterShare title={title} /> 
				<div class="centered-content">
					<Newsletter/>
				</div>
			</section>
		</main>
		<Footer />
	</body>
</html> 